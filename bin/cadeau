#!/usr/bin/env node
// -*- mode: javascript -*-


/* Load dependencies */
var fs = require('fs-extra');
var yaml = require('js-yaml');
var cadeau = require('..');
var path = require('path');
var cadjson = require('../package.json');

var ArgumentParser = require('argparse').ArgumentParser;

var parser = new ArgumentParser({
  version: cadjson.version,
  addHelp:true,
  description: 'Cadeau slide management tool'
});

parser.addArgument(
    [ '-w', '--watch' ],
    {
	defaultValue: false,
	action: 'storeTrue',
	help: 'Watch for changes in source material'
    }
);

parser.addArgument(
  [ '-s', '--slides' ],
  {
      defaultValue: "slides.yaml",
      help: 'Slides file'
  }
);

parser.addArgument(
  [ '-p', '--port' ],
  {
      defaultValue: 8000,
      type: 'int',
      help: 'Port for local server'
  }
);

parser.addArgument(
  [ '-o', '--output' ],
  {
      defaultValue: "output",
      help: 'Output directory'
  }
);

parser.addArgument(
  [ '-n', '--node' ],
  {
      defaultValue: false,
      action: 'storeTrue',
      help: 'Name of node webkit bundle (should end in .nw)'
  }
);

var args = parser.parseArgs();

/* Pull out arguments */
var src = args.slides;
var dst = args.output;

var watch = args.watch;

var generate = null;

var watched = {};

var watchFile = function(f) {
    if (watch) {
	if (f in watched) return;
	fs.watch(f, generate);
	watched[f] = true;
    }
}

generate = function () {
    /* Read the presentation file */
    var raw = fs.readFileSync(src, "utf8");
    /* Transform it into a data structure. */
    var data = yaml.load(raw, { filename: src });


    if (watch) { console.log("Generating presentation files to "+dst); }
    var context = cadeau.processSlides(data, watchFile);

    /* Make the directory, if we didn't already. */
    fs.mkdirsSync(dst);
    /* Run the code generator for the backend engine */
    cadeau.generate(context, dst);
    /* Copy presentation specific resources.

       Note, this is deliberatly done second to allow the presentation
       to insert its own resources to overwrite those added by
       the backend engine.
    */
    cadeau.copyResources(data, watchFile, dst);

    /* Create zip file */
    if (args.node) {
	var spawn = require('child_process').spawn;
	console.log("Generating node-webkit output at "+args.node);
	var zip = spawn('zip', ['-r', path.join("..", args.node), '.'], { cwd: "output" });

	zip.stderr.on('data', function (data) {
	    console.log('Zip: ' + data);
	});

	zip.on('close', function (code) {
	    console.log('Zip of '+args.node+' created, exited with code ' + code);
	});
    }
}

watchFile(src);

generate();

if (watch) {
    var connect = require('connect');

    connect()
	.use(connect.static(dst))
	.listen(args.port);

    console.log("Running server on port "+args.port);
    console.log("Watching for changes");
}
